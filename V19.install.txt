366    /**
367     * Installer for platform versions 19.
368     */
369    private static final class V19 {
370
371        private static void install(ClassLoader loader, List<File> additionalClassPathEntries,
372                File optimizedDirectory)
373                        throws IllegalArgumentException, IllegalAccessException,
374                        NoSuchFieldException, InvocationTargetException, NoSuchMethodException {
375            /* The patched class loader is expected to be a descendant of
376             * dalvik.system.BaseDexClassLoader. We modify its
377             * dalvik.system.DexPathList pathList field to append additional DEX
378             * file entries.
379             */
380            Field pathListField = findField(loader, "pathList");
381            Object dexPathList = pathListField.get(loader);
382            ArrayList<IOException> suppressedExceptions = new ArrayList<IOException>();
383            expandFieldArray(dexPathList, "dexElements", makeDexElements(dexPathList,
384                    new ArrayList<File>(additionalClassPathEntries), optimizedDirectory,
385                    suppressedExceptions));
386            if (suppressedExceptions.size() > 0) {
387                for (IOException e : suppressedExceptions) {
388                    Log.w(TAG, "Exception in makeDexElement", e);
389                }
390                Field suppressedExceptionsField =
391                        findField(loader, "dexElementsSuppressedExceptions");
392                IOException[] dexElementsSuppressedExceptions =
393                        (IOException[]) suppressedExceptionsField.get(loader);
394
395                if (dexElementsSuppressedExceptions == null) {
396                    dexElementsSuppressedExceptions =
397                            suppressedExceptions.toArray(
398                                    new IOException[suppressedExceptions.size()]);
399                } else {
400                    IOException[] combined =
401                            new IOException[suppressedExceptions.size() +
402                                            dexElementsSuppressedExceptions.length];
403                    suppressedExceptions.toArray(combined);
404                    System.arraycopy(dexElementsSuppressedExceptions, 0, combined,
405                            suppressedExceptions.size(), dexElementsSuppressedExceptions.length);
406                    dexElementsSuppressedExceptions = combined;
407                }
408
409                suppressedExceptionsField.set(loader, dexElementsSuppressedExceptions);
410            }
411        }
412
413        /**
414         * A wrapper around
415         * {@code private static final dalvik.system.DexPathList#makeDexElements}.
416         */
417        private static Object[] makeDexElements(
418                Object dexPathList, ArrayList<File> files, File optimizedDirectory,
419                ArrayList<IOException> suppressedExceptions)
420                        throws IllegalAccessException, InvocationTargetException,
421                        NoSuchMethodException {
422            Method makeDexElements =
423                    findMethod(dexPathList, "makeDexElements", ArrayList.class, File.class,
424                            ArrayList.class);
425
426            return (Object[]) makeDexElements.invoke(dexPathList, files, optimizedDirectory,
427                    suppressedExceptions);
428        }
429    }